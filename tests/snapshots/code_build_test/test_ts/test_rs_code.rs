
/**
 * This file was generated by the extract tool.
 * Do not modify this file manually.
 * 
 */

///
/// The struct of the RsTestTable
/// based on the database table rs_test_table
///
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
pub struct RsTestTable {
	id: isize,
	name: String,
	age: Option<isize>,
	cash: Option<f64>,
	dep: Option<String>
}

///
/// The source-of-truth resource name (database table name) of the RsTestTable
///
pub const RESOURCE_NAME: &str = "rs_test_table";

///
/// The data column names of the RsTestTable
///
pub const FIELD_NAMES: [&str; 5] = ["id", "name", "age", "cash", "dep"];

///
/// The data column set of the RsTestTable
///
pub fn field_name_set() -> std::collections::HashSet<String> {
    FIELD_NAMES.iter().map(|s| s.to_string()).collect()
}

///
/// Get a new instance of the struct RsTestTable with the default values if not provided
/// # Parameters
/// `input`: The input RsTestTable to copy values from
///
pub fn build(input: &RsTestTable) -> RsTestTable {
    let ret: &mut RsTestTable = &mut RsTestTable {
			id: input.id,
			name: input.name.to_string(),
			age: input.age,
			cash: input.cash,
			dep: input.dep.clone(),
    };
		if input.age.is_none() { ret.age = Some(9); }
		if input.cash.is_none() { ret.cash = Some(4.2); }
		if input.dep.is_none() { ret.dep = Some(r#"dev-"big"'BIG'"#.to_string()); }
    ret.clone()
}
