
/**
 * This file was generated by the extract tool.
 * Do not modify this file manually.
 * Unless you know what you are doing or at your own risk
 */

/**
 * The type of string constrained to the field names of the TsTestTable
 */
export type FieldName = 'id' | 'name' | 'age' | 'cash' | 'dep';

export type Payload = Record<FieldName, any>;

/**
 * The entity type of the TsTestTable
 */
export interface TsTestTable {
	id: number;
	name: string;
	age?: number;
	cash?: number;
	dep?: string;
}

/**
 * The data-column names list of the TsTestTable
 */
export const FIELD_NAMES: readonly FieldName[] = Object.freeze(['id', 'name', 'age', 'cash', 'dep']);

/**
 * The source-of-truth resource name resource name (database table name) of the TsTestTable
 */
export const RESOURCE_NAME = 'ts_test_table';

export const COL_NAME_ID = "id";
export const COL_NAME_NAME = "name";
export const COL_NAME_AGE = "age";
export const COL_NAME_CASH = "cash";
export const COL_NAME_DEP = "dep";

/**
 * The data-column name set of the TsTestTable
 */
export const FieldNameSet: ReadonlySet<FieldName> = Object.freeze(new Set(FIELD_NAMES));

/**
 * Verify the input for the TsTestTable operation, make sure it's a valid payload
 */
export function verify_common(input: Payload): void {
    if (Object.keys(input).length == 0) {
        throw new Error(`The input for the operation of TsTestTable doesn't have any key`);
    }
    const trespasser_option = Object.keys(input).find(key => !(FieldNameSet as Set<string>).has(key));
    if (trespasser_option) {
        throw new Error(`The input for the operation of TsTestTable has a key '${trespasser_option}' that is not allowed`);
    }
}

/**
 * Verify the presence of required fields of the input for the TsTestTable operation
 */
export function verify_required(input: Payload): void {
    verify_common(input);
		if (input.id == null) { throw new Error(`The input for the operation of TsTestTable requires value for the key '$id'`); };
		if (input.name == null) { throw new Error(`The input for the operation of TsTestTable requires value for the key '$name'`); };
}

/**
 * Get the default values for the TsTestTable's payload
 */
export function get_defaults(): Payload {
    const ret = {} as Payload;
	ret.age = 9;
	ret.cash = 4.2;
	ret.dep = "dev-\"big\"'BIG'";
    return ret;
}

/**
 * Get a combined payload with the given input, fill the missing fields with default values
 */
export function defaults_if_absent(input: Payload): Payload {
    verify_common(input);
    return {
        ...get_defaults(),
        ...input,
    };
}
